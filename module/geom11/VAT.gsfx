Texture2D posTex;

int nFrames<string uiname = "numOfFrames";>;
float posMin;
float posMax;

float time<float uimin = 0; float uimax = 1.0;> = 0;

SamplerState s : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct vsin
{
	float3 PosO: POSITION;
	float3 Normal: NORMAL;
	float3 Tangent : TANGENT;
	float3 Binormal : BINORMAL;
	float2 UV: TEXCOORD0;
#if defined(TWOUV)
	float2 UV2 : TEXCOORD1;
#endif
};

struct vs2gs
{
	float3 PosO: POSITION;
	float3 Normal: NORMAL;
	float3 Tangent : TANGENT;
	float3 Binormal : BINORMAL;
	float2 UV: TEXCOORD0;
};

struct VATAttribute
{
	float3 pos;
	float3 norm;
};

VATAttribute GetAttributeFromTexture(float2 uv)
{
	float FPS = 24.0;
	float FPS_div_Frames = FPS / nFrames;
	
	float t = min(time, .99) * (1 / FPS) * nFrames;
	
	float timeInFrames = frac(FPS_div_Frames * t);
	
	timeInFrames = ceil(timeInFrames * nFrames);
	timeInFrames /= nFrames;
	
	float2 coord;
	coord.y = timeInFrames + uv.y;
	coord.x = uv.x;	
	
	float4 texturePos = posTex.SampleLevel(s, coord, 0);
	float expand = posMax - posMin;
	texturePos.xyz *= expand;
	texturePos.xyz += posMin;
	
	float alpha = texturePos.w * 1024;
	float2 f2;
	f2.x = floor(alpha / 32.0) / 31.5;
	f2.y = (alpha - (floor(alpha / 32.0) * 32.0)) / 31.5;
	
	float3 f3;
	f2 *= 4;
	f2 -= 2;
	float f2dot = dot(f2, f2);
	f3.xy = sqrt(1 - (f2dot / 4.0)) * f2;
	f3.z = 1 - (f2dot / 2.0);
	f3 = clamp(f3, -1.0, 1.0);
	f3.x = 1 - f3.x;

	VATAttribute o;
	o.pos = texturePos.xzy;
	o.norm = f3.xzy;
	return o;
}

vs2gs VS_Fluid(vsin input)
{
	vs2gs Out;
	
	Out.PosO = input.PosO;
	Out.Normal = input.Normal;
	Out.Tangent = input.Tangent;
	Out.Binormal = input.Binormal;
	Out.UV = input.UV;
	
	VATAttribute v;
	
#if defined(TWOUV)
	v = GetAttributeFromTexture(input.UV2);
	Out.PosO = v.pos;
	Out.Normal = v.norm;
#else
	v = GetAttributeFromTexture(input.UV);
	Out.PosO = v.pos;
	Out.Normal = v.norm;
#endif
	
    return Out;
}

vs2gs VS_Soft(vsin input)
{
	vs2gs Out;
	
	Out.PosO = input.PosO;
	Out.Normal = input.Normal;
	Out.Tangent = input.Tangent;
	Out.Binormal = input.Binormal;
	Out.UV = input.UV;
	
	VATAttribute v;
	
#if defined(TWOUV)
	v = GetAttributeFromTexture(input.UV2);
	Out.PosO += v.pos;
	Out.Normal = v.norm;
#else
	v = GetAttributeFromTexture(input.UV);
	Out.PosO += v.pos;
	Out.Normal = v.norm;
#endif
	
    return Out;
}


GeometryShader StreamOutGS_Fluid = ConstructGSWithSO( CompileShader( vs_5_0, VS_Fluid() ), "POSITION.xyz;NORMAL.xyz;TANGENT.xyz;BINORMAL.xyz;TEXCOORD.xy", NULL,NULL,NULL,-1 );
GeometryShader StreamOutGS_Soft = ConstructGSWithSO( CompileShader( vs_5_0, VS_Soft() ), "POSITION.xyz;NORMAL.xyz;TANGENT.xyz;BINORMAL.xyz;TEXCOORD.xy", NULL,NULL,NULL,-1 );

technique10 Soft
{
    pass PP2
    {
        SetVertexShader( CompileShader( vs_5_0, VS_Soft() ) );
        SetGeometryShader( StreamOutGS_Soft );
    }  
}

technique10 Fluid
{
    pass PP2
    {
        SetVertexShader( CompileShader( vs_5_0, VS_Fluid() ) );
        SetGeometryShader( StreamOutGS_Fluid );
    }  
}

